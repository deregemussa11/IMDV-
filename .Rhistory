library(readr)
IMDB_Dataset <- read_csv("C:/kaggle/archive/IMDB Dataset.csv")
View(IMDB_Dataset)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tm) # topic modeling
library(e1071) # build model
library(gmodels) # cross tabulation
library(dplyr) # data manipulation
library(readr) # read data
library(tidytext)
library(SnowballC)
library(ggplot2)
movie_reviews <- read_csv("IMDB Dataset.csv")
movie_reviews <- read_csv("IMDB Dataset.csv")
View(movie_reviews)
review_df <- movie_reviews |>
# select(review) |>
unnest_tokens(word, review)
head(review_df)
review_df <- review_df |>
mutate(stem = wordStem(word))
review_df <- review_df |>
anti_join(stop_words[stop_words$lexicon =='snowball',],by = "word")
View(review_df)
View(movie_reviews)
View(review_df)
review_df |>
group_by(word) |>
summarise(count = n()) |>
arrange(desc(count)) |>
head()
# visualize
review_df |>
count(word, sort = TRUE) |>
mutate(word = reorder(word,n)) |>
top_n(10) |>
ggplot(aes(x = n, y = word))+
geom_col()+
labs(title = "Top 10 words in the review")
set.seed(123)
movie_reviews <- sample_n(movie_reviews, size = 15000)
review_corpus <- VCorpus(
VectorSource(movie_reviews$review))
print(review_corpus)
# check actual corpus in the text
as.character(review_corpus[[5]])
View(movie_reviews)
# clean the text
movie_revew_clean <- tm_map(review_corpus, content_transformer(tolower))
movie_revew_clean <- tm_map(movie_revew_clean, removeNumbers)
movie_revew_clean <- tm_map(movie_revew_clean, removeWords, stopwords())
movie_revew_clean <- tm_map(movie_revew_clean, removePunctuation)
movie_revew_clean <- tm_map(movie_revew_clean, stripWhitespace)
as.character(movie_revew_clean[[5]])
as.character(movie_revew_clean[[5]])
# Tokenize as document term matrix
movie_revew_dtm <- DocumentTermMatrix(movie_revew_clean)
View(movie_revew_dtm)
View(movie_revew_dtm)
movie_revew_dtm
# split the data set to train the model
movie_reviews_train <- movie_revew_dtm[1:11250,] # 75%
movie_reviews_test <- movie_revew_dtm[11251:15000,] # 25%
movie_reviews_train_labels <- movie_reviews[1:11250,]$sentiment # 75%
movie_reviews_test_labels <- movie_reviews[11251:15000,]$sentiment# 25%
# check the distribution of train and test data
prop.table(table(movie_reviews_train_labels))
prop.table(table(movie_reviews_test_labels))
# find terms that appear 5 times or more in the review
review_freq_words_tr <- findFreqTerms(movie_reviews_train, 5)
review_freq_words_ts <- findFreqTerms(movie_reviews_test, 5)
# include only the frequent terms in the training and test data
movie_review_freq_train <- movie_reviews_train[, review_freq_words_tr]
movie_review_freq_test <- movie_reviews_test[, review_freq_words_ts]
# function that will check the presence of the each term
check_term <- function(x){
x <- ifelse(x> 0, "Yes", "No")
}
review_train <- apply(movie_review_freq_train, MARGIN = 2, check_term)
review_test <- apply(movie_review_freq_test, MARGIN = 2, check_term)
View(review_test)
